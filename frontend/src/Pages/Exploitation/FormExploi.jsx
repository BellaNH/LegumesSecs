import * as React from 'react';
import Box from '@mui/material/Box';
import TextField from '@mui/material/TextField';
import { useState } from 'react';
import {IoMdInformationCircleOutline} from "react-icons/io"
import { useGlobalContext } from '../../context';
import { useEffect } from 'react';
import { MenuItem } from '@mui/material';
import { useNavigate } from "react-router-dom";
import axios from "axios";
import { FaArrowLeftLong } from "react-icons/fa6";
import { IoIosArrowBack } from 'react-icons/io';
import { IoIosArrowRoundBack } from "react-icons/io";
import Plus from "../pics/Plus.png"
import Modifer from "../pics/Modifier.png"

const FormExploi = ({setSelectedExploiEdit,selectedExploiEdit})=>{
    const {fetchExploitationWithParcelles,exploitations,url
      ,agriculteurs,communes,fetchAgriculteurs} = useGlobalContext()
    const navigate = useNavigate()
    const [selectedAgri,setSelectedAgri] = useState("")
    const [selectedCommune,setSelectedCommune] = useState("")
    const [selectedSituation,setSelectedSituation] = useState("")
    const [autreSituation, setAutreSituation] = useState("");
    const [openForm,setOpenForm] = useState(true)
    const [data,setData] = useState({
        nom:"",
        lieu:"",
        superficie:"",
        situation:"",
        longtitude:"",
        latitude:"",
        agriculteur:"",
        commune_id:""
    })
    useEffect(()=>{
      const fetchExploi = async ()=>{
      if(selectedExploiEdit){
        try {
          const response = await axios.get(
            `${url}/api/exploitation/${selectedExploiEdit}/`,
            {
        headers: {
          Authorization: `Bearer ${localStorage.getItem("token")}`,
        }
        }
        )

        console.log(response.data)
        setData(prevData => ({
        ...prevData,
        nom: response.data.nom,
        lieu: response.data.lieu,
        superficie: response.data.superficie,
        situation: response.data.situation,
        longtitude: response.data.longtitude,
        latitude: response.data.latitude,
        agriculteur: response.data.agriculteur,
        commune_id: response.data.commune.id,
        }))
        
        } catch (error) {
          console.error('Erreur lors de la mise à jour', error);
        }
      }
    }
    fetchExploi()
    
    },[selectedExploiEdit])
    useEffect(()=>{console.log(data)},[data])
    const handleChange = (e) => {
  const { name, value } = e.target;

  if (name === "commune_id") {
    setSelectedCommune(parseInt(value));
  }

  if (name === "agriculteur") {
    setSelectedAgri(value);
  }

  if (name === "situation") {
    setSelectedSituation(value);

    if (value === "autre") {
      setData(prev => ({ ...prev, situation: "" })); 
      setAutreSituation(""); 
    } else {

      setData(prev => ({ ...prev, situation: value }));
      setAutreSituation(""); 
    }
  }

  if (name !== "situation") {
    setData(prev => ({ ...prev, [name]: value }));
  }
};

const handleAutreSituationChange = (e) => {
  const value = e.target.value;
  setAutreSituation(value);
  setData(prev => ({ ...prev, situation: value }));
};

    
    const handleCancel = ()=>{
      setOpenForm(!openForm)
      setData({
        ...data,
        nom:"",
        lieu:"",
        superficie:"",
        situation:"",
        longtitude:"",
        latitude:"",
        agriculteur:"",
        commune_id:""
      })
      navigate("/exploitations")
    }
    
     const handleModifyExploi = async (e)=>{
    e.preventDefault()
    if(selectedExploiEdit){
      try{
      const response =  await axios.patch(`${url}/api/exploitation/${selectedExploiEdit}/`, 
      data, 
      {
      headers: {
      Authorization: `Bearer ${localStorage.getItem("token")}`
    }
  }
)
      console.log(response.data)
      fetchExploitationWithParcelles()
      setSelectedExploiEdit(null)
      setOpenForm(!openForm)
      setShowEditForm(!showEditForm)
    }catch(error){
      console.log(error)
    }
    }
    
   }
   
    const handleSubmit = async (e)=>{
      e.preventDefault()
      
     console.log(data)
     
     try{
       const response = await axios.post(`${url}/api/exploitation/`,data,
         {
           headers: {
             Authorization: `Bearer ${localStorage.getItem("token")}`
           }
        }
       )
       fetchExploitationWithParcelles()  
       setOpenForm(!openForm)
       setSelectedExploiEdit(null)
       setShowEditForm(!showEditForm)
       fetchAgriculteurs()
      navigate("/exploitations")
     }catch(error){
       console.log(error)
     }
     
    }
    useEffect(()=>{console.log(openForm)},[openForm])
    return(
    <div className={openForm 
      ? "fixed top-0 left-0 w-full h-full bg-[#00000090] z-50 flex justify-center items-center" 
     : ""}>
       {openForm && 
       <form onSubmit={selectedExploiEdit? handleModifyExploi : handleSubmit} className='relative left-16 w-[50%] h-[65vh]  z-10 rounded-md  grid grid-cols-2 '>
        <div className=' flex flex-col gap-4 px-4 rounded-l-md bg-white '>
          {selectedExploiEdit?
          <div className='flex gap-3 '>
            <img src={Modifer} alt='' className='w-6 h-6 mt-5'/>
          <h3 className='font-semibold text-green-600 text-xl my-4'>Modifier l'exploitation</h3>
          </div> 
          :
          <div className='flex gap-3 '>
          <img src={Plus} alt='' className='w-6 h-6 mt-5'/>
          <h3 className='font-semibold text-green-600 text-xl my-4'>Ajouter une exploitation</h3>
          </div>
          
          }
           
            <TextField value={data.nom} onChange={handleChange} name='nom' label="Nom" variant="standard" size="small" sx={{width:'100%'}}/> 
            <TextField value={data.lieu} onChange={handleChange} name='lieu' label="Lieu" variant="standard" size="small" sx={{ '& .MuiFilledInput-root': { backgroundColor:'#f7fafc' },width:'100%'}}/> 
            <TextField  select value={selectedExploiEdit ? data.commune_id : selectedCommune} onChange={handleChange} name='commune_id' label="Commune" fullWidth
            required variant="standard" size="small" sx={{ '& .MuiFilledInput-root': { backgroundColor:'#f7fafc' },width:'100%'}}>
               {communes.map((commune,index)=>{
                  return <MenuItem key={index} value={commune.id}>{commune.nom}</MenuItem>
                })}
            </TextField>
{["cooperative", "location", "prive_individu"].includes(data.situation) || data.situation === "" ? (
  <TextField
    key="select"
    value={data.situation}
    select
    onChange={(e) => {
      const value = e.target.value;
      if (value === "autre") {
        setData(prev => ({ ...prev, situation: value }));
        setAutreSituation(""); 
      } else {
        setData(prev => ({ ...prev, situation: value }));
      }
    }}
    name="situation"
    label="Situation"
    fullWidth
    required
    variant="standard"
    size="small"
    sx={{
      '& .MuiFilledInput-root': { backgroundColor: '#f7fafc' },
      width: '100%',
    }}
  >
    <MenuItem value="cooperative">Coopérative</MenuItem>
    <MenuItem value="location">Location</MenuItem>
    <MenuItem value="prive_individu">Privé individuel</MenuItem>
    <MenuItem value="autre">Autre</MenuItem>
  </TextField>
) : (
  <>
    <TextField
      key="autre"
      value={autreSituation}
      onChange={(e) => (setAutreSituation(e.target.value),handleAutreSituationChange(e))}
      name="situation"
      label="Situation (autre)"
      variant="standard"
      size="small"
      sx={{
        '& .MuiFilledInput-root': { backgroundColor: '#f7fafc' },
        width: '100%',
      }}
    />
    <IoIosArrowRoundBack
      onClick={() => {
        setData(prev => ({ ...prev, situation: "" }));
        setAutreSituation("");
      }}
      style={{ cursor: 'pointer', fontSize: '1.5rem', marginTop: '0.5rem' }}
      title="Retour au menu déroulant"
    />
  </>
)}


        </div>
        <div className='flex flex-col gap-4 bg-green-700  px-4 rounded-r-md py-1' >
        <IoMdInformationCircleOutline className="text-white w-8 h-8 mt-4 ml-[85%] mb-3"/>
<TextField
  select
  variant="outlined"
  label="Agriculteur"
  name="agriculteur"
  value={selectedExploiEdit ? data.agriculteur : selectedAgri}
  onChange={handleChange}
  required
  size="small"
  fullWidth
  InputLabelProps={{
    sx: {
      color: 'white',
      '&.Mui-focused': {
        color: 'white',
      },
    },
  }}
  InputProps={{
    sx: {
      color: 'white',
      '& .MuiOutlinedInput-notchedOutline': {
        borderColor: 'white',
      },
      '&:hover .MuiOutlinedInput-notchedOutline': {
        borderColor: 'white',
      },
      '&.Mui-focused .MuiOutlinedInput-notchedOutline': {
        borderColor: 'white',
      },
      '& .MuiSvgIcon-root': {
        color: 'white', 
      },
    },
  }}
  sx={{
    '& .MuiInputBase-input': {
      color: 'white',
    },
    '& .MuiSelect-icon': {
      color: 'white',
    },
    boxShadow: 'rgba(149,157,165,0.2) 0px 8px 24px',
    borderRadius: '4px',
  }}
>
  {agriculteurs.map((agri, index) => (
    <MenuItem key={index} value={agri.id}>
      {agri.id}
    </MenuItem>
  ))}
</TextField>



            <TextField value={data.superficie} onChange={handleChange} name='superficie' InputLabelProps={{sx:{color:'white','&.Mui-focused':{color:'white'}}}} InputProps={{sx:{color:'white','&:before':{borderBottom:'1px solid white'},'&:after':{borderBottom:'1px solid white'}}}} label="Superficie" variant="standard" size="small" sx={{width:'100%', '& > :not(style)':{color:'white'},boxShadow:'rgba(149,157,165,0.2) 0px 8px 24px',border:'none' }}/> 
            <TextField value={data.longtitude} onChange={handleChange} name='longtitude' InputLabelProps={{sx:{color:'white','&.Mui-focused':{color:'white'}}}} InputProps={{sx:{color:'white','&:before':{borderBottom:'1px solid white'},'&:after':{borderBottom:'1px solid white'}}}} label="longtitude" variant="standard" size="small" sx={{width:'100%', '& > :not(style)':{color:'white'},boxShadow:'rgba(149,157,165,0.2) 0px 8px 24px',border:'none' }}/> 
            <TextField value={data.latitude} onChange={handleChange} name='latitude' InputLabelProps={{sx:{color:'white','&.Mui-focused':{color:'white'}}}} InputProps={{sx:{color:'white','&:before':{borderBottom:'1px solid white'},'&:after':{borderBottom:'1px solid white'}}}} label="latitude" variant="standard" size="small" sx={{ '& > :not(style)': { color:'white' },width:'100%',boxShadow:'rgba(149,157,165,0.2) 0px 8px 24px',border:'none'}}/> 
            <div className='flex justify-center gap-6 py-4'>
            <button type='button' className='bg-white rounded-md w-auto px-8 py-1 text-red-600 font-semibold' onClick={handleCancel}>Cancel</button>
            {selectedExploiEdit
            ?<button type='submit'  className='bg-lime-600 rounded-md w-auto px-8 py-2 text-white text-base'>Modifier</button>
            :<button type='submit'  className='bg-green-600 rounded-md w-auto px-8 py-2 text-white text-base'>Ajouter</button>}
            
            </div>
      
       
        </div>
        
    </form>

    }
      
    </div>
    )
    
}
export default FormExploi