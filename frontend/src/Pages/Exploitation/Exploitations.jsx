import { useEffect, useState } from "react"
import {MdDelete, MdEdit} from "react-icons/md"
import { MdModeEdit } from "react-icons/md"
import {BsThreeDotsVertical} from "react-icons/bs"
import {RiArrowDropDownLine} from "react-icons/ri"
import {RiArrowDropUpLine} from "react-icons/ri"
import { MdKeyboardDoubleArrowDown } from "react-icons/md"
import Select  from "@mui/material/Select"
import MenuItem from "@mui/material/MenuItem"
import TextField from "@mui/material/TextField"
import FormControl from "@mui/material/FormControl"
import InputLabel from "@mui/material/InputLabel"
import { Link } from "react-router-dom"
import { useGlobalContext } from "../../context"
import { useNavigate } from "react-router-dom"
import axios from "axios";
import FormExploi from "./FormExploi"
import AjouterParcelle from "../Parcelle/AjouterParcelle"
const Exploitations = ()=>{
    const [openMenuId,setOpenMenuId] = useState()
    const [openedExploitationId,setOpenedExploitationId] = useState()
    const [openedParcelleId,setOpenedParcelleId] = useState(false)
    const [clicked,setClicked] = useState(false)
    const [targetWilaya,setTargetWilaya] = useState('')
    const [targetCommune,setTargetCommune] = useState('')
    const [targetSubdiv,setTargetSubdiv] = useState('')
    const [selectedWilaya,setSelectedWilaya] = useState('')
    const [selectedSubdiv,setSelectedSubdiv] = useState('')
    const [selectedCommune,setSelectedCommune] = useState('')
    const [clickedExploi,setClickedExploi] = useState(false)
    const navigate = useNavigate()
    const {url,user,fetchExploitationWithParcelles,exploitations,wilayas,
        subdivisions,communes,exploitationId,setExploitationId,setExploitations,
        parcelles,selectedAgriculteur,setSelectedAgriculteur,setSelectedExploi,
        selectedExploi}= useGlobalContext('')
    const [filteredSubdiv,setFilteredSubdiv] = useState('')
    const [filteredCommune,setFilteredCommune] = useState('')
    const currentWilaya = openedExploitationId ? targetWilaya : selectedWilaya;
    const currentSubdiv = openedExploitationId ? targetSubdiv : selectedSubdiv;
    const currentCommune = openedExploitationId ? targetCommune : selectedCommune;

    const [selectedExploiEdit,setSelectedExploiEdit] = useState()
    const [showEditForm,setShowEditForm] =  useState(false)
  
    const [modifiedparcelleId,setModifiedParcelleId] = useState(null)
   
    const showMenu = (e,id)=>{
        const clickedId = e.currentTarget.id
        if(clickedId === openMenuId){
            setOpenMenuId(null)
        }else{
            setOpenMenuId(clickedId)
        }
    }
    const showParcelles = (e)=>{
        const clickedId = e.currentTarget.id
        if(clickedId === openedExploitationId){
            setOpenedExploitationId(null)
        }else{
            setOpenedExploitationId(clickedId)
            setTargetWilaya(e.target.dataset.wilaya)
            setTargetCommune(e.target.dataset.commune)
            setTargetSubdiv(e.target.dataset.subdiv) 
        }
    }

    const showParcelleInfos = (e,id)=>{
        const clickedId = e.currentTarget.id
        if(clickedId === openedParcelleId){
            setOpenedParcelleId(null)
        }else{
            setOpenedParcelleId(clickedId)
        }
    }


    const fetchFilteredExploi = async (wilaya = null, subdivision = null, commune = null) => {
    try {
        const response = await axios.get(`${url}/api/exploitations-filter/`, {
            params: {
                wilaya,
                subdivision,
                commune
            },
            headers: {
                Authorization: `Bearer ${localStorage.getItem("token")}`
            }
        });
        console.log(response.data);
        setExploitations(response.data)
    } catch (error) {
        console.log(error);
    }
};



    const filterSubdivByWilaya = async (selectedWilaya)=>{
        console.log(selectedWilaya)
        if(selectedWilaya){
        try{  
            console.log(`${url}/api/filterSubdivBywilaya/?wilaya=${selectedWilaya}`)        
            const response = await axios.get(`${url}/api/filterSubdivBywilaya/?wilaya=${selectedWilaya}`,
            {
                headers: {
                  Authorization: `Bearer ${localStorage.getItem("token")}`
                }
        }
            
        )
        
        console.log(response)
        setFilteredSubdiv(response.data)
     
        
    }catch(error){
            console.log(error)
        }
    }}
    const filterCommuneByWilaya = async (selectedWilaya)=>{
        console.log(selectedWilaya)
        if(selectedWilaya){
        try{  
            console.log(`${url}/api/filterCommuneBywilaya/?wilaya=${selectedWilaya}`)        
            const response = await axios.get(`${url}/api/filterCommuneBywilaya/?wilaya=${selectedWilaya}`,
            {
                headers: {
                  Authorization: `Bearer ${localStorage.getItem("token")}`
                }
        }
            
        )
        
        console.log(response)
        setFilteredCommune(response.data)
        
        
    }catch(error){
            console.log(error)
        }
    }}
    const filterCommuneBySubdiv = async (selectedSubdiv)=>{
        if(selectedSubdiv){
        try{
        const response = await axios.get(`${url}/api/filterCommuneBySubdiv/?subdivision=${selectedSubdiv}`,
            {
                headers: {
                  Authorization: `Bearer ${localStorage.getItem("token")}`
                }
        }
        )
        
     
    console.log(response)
    setFilteredCommune(response.data)  
    }catch(error){
            console.log(error)
        }
    }}
    const onChange = (e)=>{     
        const {name,value} = e.target
        if(name ==="wilaya"){
     
            setSelectedWilaya(value || "")
            filterSubdivByWilaya(value)
            filterCommuneByWilaya(value)
            fetchFilteredExploi(value)
            
        }
        if(name ==="subdiv"){

            setSelectedSubdiv(value || "")
            filterCommuneBySubdiv(value)
            fetchFilteredExploi(selectedWilaya,value,selectedCommune)
        }
        if(name ==="commune"){
            setSelectedCommune(value || "")
            fetchFilteredExploi(selectedWilaya,selectedSubdiv,value)
        }
    }
    const handleEdit = (wilaya) => {
        setEditingId(wilaya.id);
        setEditingName(wilaya.nom);
      };
    
     const handleDelete = async (id) => {
       try {
         const response = await axios.delete(`${url}/api/exploitation-parcelles/${id}/`,
          {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`
          }
         }
         )
         console.log(response.data)
         fetchExploitationWithParcelles()
       } catch (error) {
         console.error("Erreur côté client :", error.response?.data || error.message);
       }
     }; 
    
        console.log(showEditForm)
     
    const handleDeleteParcelles = async (id) => {
        try {
          const response = await axios.delete(`${url}/api/parcelle/${id}/`,
            {
                headers: {
                  Authorization: `Bearer ${localStorage.getItem("token")}`
                }
        }
          )    
          console.log(response)
          fetchExploitationWithParcelles()
        } catch (error) {
          console.error("Erreur côté client :", error.response?.data || error.message);
        }
      };
    
    const handleSelectAgri = (id)=>{
        if(id){
            setSelectedAgriculteur(id)
        }
        navigate("/agriculteurs") 
        
    }
    useEffect(()=>{console.log(selectedAgriculteur)},[selectedAgriculteur])
    const handleModifyExploi = (id)=>{
        console.log(id)
        if(id){
            setShowEditForm(!showEditForm)
            setSelectedExploiEdit(id)
            setOpenMenuId(null)
        }
       
    }
    useEffect(()=>{console.log(selectedExploi)},[selectedExploi])
    return (
        <div className="relative flex flex-col w-[80%] ">
            
        <div className="flex flex-col gap-6 w-[90%] mt-14 py-4 mx-auto z-0">{clicked?
            <h3 className="font-semibold text-xl">Localisation de l'exploitation selectionnée</h3>:
            <h3 className="font-semibold text-xl">Filtrer les exploitations par localisation</h3>}
            <div style={{boxShadow:"rgba(0,0,0,0.16) 0px 1px 4px"}} className="flex justify-between px-8 bg-gray-50 py-4 rounded-md" >
            <FormControl size="small" className="w-[30%] " variant="outlined">
                <InputLabel>Wilaya</InputLabel>
                {wilayas.length > 0 &&
                <Select 
                disabled={!!openedExploitationId} name="wilaya" style={{boxShadow:"rgba(0,0,0,0.16) 0px 1px 4px"}} sx={{backgroundColor:"white"}} 
                onChange={(e)=>onChange(e)} 
                value={currentWilaya} 
                label="wilaya" 
                className="w-[100%]">
                <MenuItem value=""><em>None</em></MenuItem> 
                {wilayas.map((wilaya,index)=>(
                              <MenuItem value={wilaya.id} key={index}>{wilaya.nom}</MenuItem>
                            ))}

                </Select>
}
            </FormControl>

            <FormControl size="small" className="w-[30%] " variant="outlined">
                <InputLabel>Subdiv</InputLabel>
                {subdivisions.length > 0 &&
                <Select disabled={!!openedExploitationId} name="subdiv" 
                style={{boxShadow:"rgba(0,0,0,0.16) 0px 1px 4px"}} sx={{backgroundColor:"white"}} 
                onChange={(e)=>onChange(e)} 
                value={currentSubdiv} label="wilaya" className="w-[100%]">
                    <MenuItem value=""><em>None</em></MenuItem> 
                {!openedExploitationId && filteredSubdiv.length > 0 ? 
                filteredSubdiv.map((subdiv,index)=>{return <MenuItem key={index} value={subdiv.id}>{subdiv.nom}</MenuItem>})
                :subdivisions.map((subdiv,index)=>{
                    return <MenuItem key={index} value={subdiv.id}>{subdiv.nom}</MenuItem>
                  })
                
            }
                </Select>  
}  
            </FormControl>

            <FormControl size="small" className="w-[30%] " variant="outlined">
                <InputLabel>Commune</InputLabel>
                {communes.length > 0 &&
                <Select 
                disabled={!!openedExploitationId} name="commune" 
                style={{boxShadow:"rgba(0,0,0,0.16) 0px 1px 4px"}} sx={{backgroundColor:"white"}}
                onChange={(e)=>onChange(e)} 
                value={currentCommune} label="Commune" className="w-[100%]">
                <MenuItem value=""><em>None</em></MenuItem> 
                {!openedExploitationId &&  filteredCommune.length > 0 
                ? filteredCommune.map((commune,index)=>{
                                  return <MenuItem key={index} value={commune.id}>{commune.nom}</MenuItem>
                }):
                communes.map((commune,index)=>{
                                  return <MenuItem key={index} value={commune.id}>{commune.nom}</MenuItem>}
                )}
                </Select>
}
            
            </FormControl>
            
        </div>
        </div>
        <div className="w-[100%] pt-4 px-10 pb-10">
            <h3 className='font-semibold text-xl my-4'>Exploitations</h3>
            <div className="grid grid-cols-[0.5fr_0.5fr_1.2fr_1.5fr_1fr_1fr_1fr_1fr] items-center text-left border-b-[1px] border-b-[#d1d5db] py-2 px-0 h-fit">
             <p className="text-sm font-semibold"></p>
             <p className="text-sm font-semibold">id</p>
             <p className="text-sm font-semibold">Nom</p>
             <p className="text-sm font-semibold">Lieu</p>
             <p className="text-sm font-semibold ">Situation</p>
             <p className="text-sm font-semibold ">Superficie</p>
             <p className="text-sm font-semibold ">Longtitude</p>
             <p className="text-sm font-semibold">Latitude</p>
            </div>
            
                {exploitations && exploitations.map((exploi,index)=>{
                    return (
                    <div key={index} 
                    onClick={()=>setSelectedExploi(null)}
                    className={`${exploi.agriculteur?.id === selectedExploi ?"bg-blue-50":"bg-transparent"}  flex flex-col gap-4 hover:bg-[#f9fafb] border-b-[1px] border-b-[#d1d5db] py-3 px-0`}>
                       {console.log(exploi)}
                    <div onClick={()=>setClickedExploi(!clickedExploi)} className="grid grid-cols-[0.5fr_0.5fr_1.2fr_1.5fr_1fr_1fr_1fr_1fr] items-center text-left  relative">
                        {String(openedExploitationId) === String(exploi.id) ?
                        <RiArrowDropUpLine id={exploi.id} onClick={(e)=>showParcelles(e)}  className="hover:bg-gray-100 mx-2 w-5 h-5 rounded-full"/>:
                        <RiArrowDropDownLine id={exploi.id} data-wilaya={exploi.commune?.subdivision?.wilaya?.id} data-subdiv={exploi.commune?.subdivision?.id} data-commune={exploi.commune?.id} onClick={(e)=>showParcelles(e)} className=" hover:bg-gray-100 mx-2 w-5 h-5 rounded-full"/>}          
                         <p className="text-sm ">{exploi.id}</p>
                         <p className="text-sm ">{exploi.nom}</p>
                         <p className="text-sm ">{exploi.lieu}</p>
                         <p className="text-sm  ml-2">{exploi.situation}</p>
                         <p className="text-sm  ml-2">{exploi.superficie}</p>
                         <p className="text-sm  ml-2">{exploi.longtitude}</p>
                         <p className="text-sm ml-2">{exploi.latitude}</p>   
                         {(user.role.nom === "admin" ||
    (user.permissions.find(p => p.model === "exploitation" && (p.update === "true"|| p.delete === "true")) ) )
  && <div id={exploi.id} onClick={(e)=>showMenu(e,exploi.id)} className="bg-transparent w-6 h-6 rounded-[50%] absolute right-2 hover:bg-gray-300 py-1 cursor-pointer">
                         <BsThreeDotsVertical className="mx-auto relative"/>
                         </div>
                         } 
                         
                           {openMenuId && exploi.id && String(openMenuId) === String(exploi.id) &&
                         <div id={exploi.id} style={{boxShadow:"rgba(149,157,165,0.2) 0px 8px 24px"}} className="w-34 h-fit bg-white rounded-md absolute top-3 right-9 z-10 ">
                            {(user.role.nom === "admin" ||
    (user.permissions.find(p => p.model === "exploitation" && p.update === "true")) ) 
    && <div 
                            onClick={()=>(handleModifyExploi(exploi.id))} 
                            className="flex justify-left gap-8 pb-2 items-center hover:bg-gray-200 transition-colors duration-400 p-2 rounded-t-md cursor-pointer">
                                <p className="text-sm text-gray-700 font-semibold">Modifier</p>
                                <MdModeEdit className="text-green-400 text-xl"/>
                            </div>
                            }
                            {(user.role.nom === "admin" ||
    (user.permissions.find(p => p.model === "exploitation" && p.delete === "true")) ) 
    && 
                            <div onClick={()=>handleDelete(exploi.id)} className="flex justify-left gap-4 items-center hover:bg-gray-200 p-2 rounded-b-md cursor-pointer">
                                <p className="text-sm text-gray-700 font-semibold">Supprimer</p>
                                <MdDelete className="text-red-400 text-xl"/>
                            </div>
                }

                            
                         </div>
                         }
                    
                        </div>
                        {String(openedExploitationId) === String(exploi.id) && 
                            <div id={exploi.id} className="px-4 w-[100%] pb-8">
                                <div className="flex flex-col gap-1">
                                    <div className="flex justify-left items-center gap-4">
                                        <p className="">Agriculteur : </p>
                                        <Link to="/agriculteurs" onClick={(e)=>handleSelectAgri(exploi.id)} className="cursor-pointer text-blue-500 font-semibold text-[0.9rem]">{exploi.agriculteur.nom} {exploi.agriculteur.prenom}</Link>
                                    </div>
                                            
                                </div>
                                <div className="flex gap-20">
                                    <h3 className="my-4">Parcelles : 3</h3>
                {(user.role.nom === "admin" ||
    (user.permissions.find(p => p.model === "parcelle" && p.create === "true")) ) 
    && 

                                    <button onClick={()=>{
                                        setExploitationId(exploi.id)
                                        }} className="bg-green-700 text-white rounded-md h-[5vw]  px-8">
                                    Ajouter
                                    </button>
                }


                                </div>
                                <div className="grid grid-cols-[1fr_1fr_1fr_1fr_0.2fr] items-center w-[90%] py-2 border-b-[1px] border-b-[#d1d5db] mx-auto ">
                                    <p className="font-semibold text-sm">Id</p>
                                    <p className="font-semibold text-sm">Espece</p>
                                    <p className="font-semibold text-sm">Superficie labourée</p>
                                    <p className="font-semibold text-sm">Superficie recoltée</p>
                                    <p></p>
                                </div>
                                
                                        {exploi.parcelles && exploi.parcelles.map((parcelle,index)=>{
                                            return (
                                                <div key={index} className="flex flex-col gap-4">
                                        <div className="grid grid-cols-[1fr_1fr_1fr_1fr_0.2fr] items-center w-[90%] py-2 border-b-[1px] border-b-[#d1d5db] mx-auto">
                                            <p className=" text-sm">{parcelle.id}</p>
                                            <p className=" text-sm">{parcelle.espece.nom}</p>
                                            <p className=" text-sm">{parcelle.sup_labouree}</p>
                                            <p className=" text-sm">{parcelle.sup_recoltee}</p>
                                            <MdKeyboardDoubleArrowDown id={parcelle.id} onClick={(e)=>showParcelleInfos(e,exploi.id)} className="cursor-pointer"/>  
                                        </div>
                                        {String(openedParcelleId) === String(parcelle.id) &&
                                  
                                        <div id={parcelle.id}>
                                           <div className="w-[100%] flex justify-left ">
                                            <div className="grid grid-cols-2 gap-12 px-4 pt-4 pb-8 w-[82%] ml-12  mb-4 relative">
                                            <div className="flex flex-col gap-1">
                                            <div className="flex justify-left text-md gap-4">
                                                <p className="w-[62%] font-semibold text-[0.9rem]">ID  : </p>
                                                <p className="text-[0.9rem]">{parcelle.id}</p>
                                            </div>
                                            <div className="flex justify-left text-md gap-4">
                                                <p className="w-[62%] font-semibold text-[0.9rem]">Annee  : </p>
                                                <p className="text-[0.9rem]">{parcelle.annee}</p>
                                            </div>
                                            <div className="flex justify-left gap-4">
                                                <p className=" w-[62%] font-semibold text-[0.9rem]" >Espece  : </p>
                                                <p className="text-[0.9rem]">{parcelle.espece.nom}</p>
                                            </div>
                                            <div className="flex justify-left gap-4">
                                                <p className=" w-[62%] font-semibold text-[0.9rem]" >Superficie  : </p>
                                                <p className="text-[0.9rem]">{parcelle.superficie}</p>
                                            </div>
                                            <div className="flex justify-left gap-4 ">
                                                <p className=" w-[62%] font-semibold text-[0.9rem]">Superficie labourée :</p>
                                                <p className="text-[0.9rem]">{parcelle.sup_labouree}</p>
                                            </div>
                                            <div className="flex justify-left gap-4">
                                                <p className=" w-[62%] font-semibold text-[0.9rem]">Superficie recoltée :</p>
                                                <p className="text-[0.9rem]">{parcelle.sup_recoltee}</p>
                                            </div>
                                            <div className="flex justify-left gap-4">
                                                <p className=" w-[62%] font-semibold text-[0.9rem]">angrais de fond :</p>
                                                <p className="text-[0.9rem]">{parcelle.engrais_de_fond}</p>
                                            </div>
                                            <div className="flex justify-left gap-4">
                                                <p className=" w-[62%] font-semibold text-[0.9rem]">superficie emblavee :</p>
                                                <p className="text-[0.9rem]">{parcelle.sup_emblavee}</p>
                                            </div>
                                            </div>
                                            <div className="flex flex-col gap-1 relative">
                                            <div className="flex justify-left gap-4">
                                                <p className=" w-[62%] font-semibold text-[0.9rem]">angrais de couverture :</p>
                                                <p className="text-[0.9rem]">{parcelle.engrais_de_couverture}</p>
                                            </div>
                                            <div className="flex justify-left gap-4">
                                                <p className=" w-[62%] font-semibold text-[0.9rem]">superficie deserbée :</p>
                                                <p className="text-[0.9rem]">{parcelle.sup_deserbee}</p>
                                            </div>
                                            <div className="flex justify-left gap-4">
                                                <p className=" w-[62%] font-semibold text-[0.9rem]">Prev de production :</p>
                                                <p className="text-[0.9rem]">{parcelle.prev_de_production}</p>
                                            </div>
                                            <div className="flex justify-left gap-4">
                                                <p className=" w-[62%] font-semibold text-[0.9rem]">superficie sinistrée :</p>
                                                <p className="text-[0.9rem]">{parcelle.sup_sinsitree}</p>
                                            </div>
                                            <div className="flex justify-left gap-4">
                                                <p className=" w-[62%] font-semibold text-[0.9rem]">production :</p>
                                                <p className="text-[0.9rem]">{parcelle.production}</p>
                                            </div>
                                            </div> 
                                            </div>
                                            <div className="flex gap-4 z-10">
                                                {(user.role.nom === "admin" ||
    (user.permissions.find(p => p.model === "parcelle" && p.delete === "true")) ) 
    && 
                                                <button type="button" onClick={()=>handleDeleteParcelles(parcelle.id)} className="bg-red-500 text-white text-[0.7rem] py-[0.7vw] px-[2vw] h-[4.5vw]  flex align-center">Supprimer</button>
                                        }

                    {(user.role.nom === "admin" ||
    (user.permissions.find(p => p.model === "parcelle" && p.update === "true")) ) 
    && 
                                                <button type="button"  onClick={()=>(setExploitationId(exploi.id),setModifiedParcelleId(parcelle.id))} className="bg-blue-700 text-white text-[0.7rem] py-[0.7vw] px-[2vw] h-[4.5vw]">Modifier</button>
                                                
                                                }
                                            </div>                    
                                            
                                            </div>
                                        <hr style={{height:'1.1px',backgroundColor:'#d1d5db',width:'90%',margin:'auto'}}/>
                                        </div>
                                    }
                                        
                                        </div> )
                                               })}
                                        
                                        
                                        
                                        
                                    </div>}
                                    </div>
                        )
                })}
            

        



        </div>
       
        {showEditForm && (          
            <FormExploi setShowEditForm={setShowEditForm} showEditForm={showEditForm} setSelectedExploiEdit={setSelectedExploiEdit} selectedExploiEdit={selectedExploiEdit}/>
            )
            }
        {exploitationId && (
            <AjouterParcelle setExploitationId={setExploitationId}/>
        )}
        {modifiedparcelleId && (
            <AjouterParcelle 
            setExploitationId={setExploitationId} 
            setModifiedParcelleId={setModifiedParcelleId}
            modifiedparcelleId={modifiedparcelleId}
            />
        )}
        </div>
    )
}
export default Exploitations